version: '3.9'

services:
  server:
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - $ENV
    expose:
      - $HOC_SERVER_PORT
    volumes:
      - .:/app
    command: >
      sh -c "cd /app/src
      && python -m uvicorn hackathon.main:create_app --factory --reload --host 0.0.0.0 --port $HOC_SERVER_PORT"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=hackathon"
      - "traefik.http.routers.hackathon_api.rule=Host(`api.localhost`) || Host(`traefik`)"
      - "traefik.http.routers.hackathon_api.entrypoints=web,web_secure"
    networks:
      - hackathon_api

  redis:
    image: redis:7.0-alpine
    expose:
      - 6379
    volumes:
      - redis_data:/data
    healthcheck:
      test: redis-cli -p 6379 ping || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - hackathon_api

  db:
    image: postgres:14.5-alpine
    environment:
      - POSTGRES_USER=${HOC_DB_USER}
      - POSTGRES_PASSWORD=${HOC_DB_PASSWORD}
      - POSTGRES_DB=${HOC_DB_NAME}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: pg_isready -d $HOC_DB_NAME -U $HOC_DB_USER
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - hackathon_api

  traefik:
    image: traefik:v2.9
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web_secure.address=:443"
      - "--tracing.jaeger=true"
      - "--tracing.jaeger.samplingParam=0"
      - "--tracing.jaeger.traceContextHeaderName=X-Request-Id"
    ports:
      - "8000:80"
      - "8085:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    depends_on:
      - server
    networks:
      - hackathon_api

networks:
  hackathon_api:
    name: hackathon_api
    driver: bridge

volumes:
  redis_data:
  postgres_data:
